# coding: utf-8

from __future__ import absolute_import

from typing import List

from swagger_server import util
from swagger_server.models.base_model_ import Model
from swagger_server.models.operation_model_kms import KMSOperationModel


class OperationModel(Model, KMSOperationModel):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    
    def __init__(self, name: str = None, inputs: List[str] = None, outputs: List[str] = None):  # noqa: E501
        """OperationModel - a model defined in Swagger

        :param name: The name of this OperationModel.  # noqa: E501
        :type name: str
        :param inputs: The inputs of this OperationModel.  # noqa: E501
        :type inputs: List[str]
        :param outputs: The outputs of this OperationModel.  # noqa: E501
        :type outputs: List[str]
        """
        self.swagger_types = {
            'name': str,
            'inputs': List[str],
            'outputs': List[str]
        }
        
        self.attribute_map = {
            'name': 'name',
            'inputs': 'inputs',
            'outputs': 'outputs'
        }
        self._name = name
        self._inputs = inputs
        self._outputs = outputs
    
    @classmethod
    def from_dict(cls, dikt) -> 'OperationModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OperationModel of this OperationModel.  # noqa: E501
        :rtype: OperationModel
        """
        return util.deserialize_model(dikt, cls)
    
    @property
    def name(self) -> str:
        """Gets the name of this OperationModel.


        :return: The name of this OperationModel.
        :rtype: str
        """
        return self._name
    
    @name.setter
    def name(self, name: str):
        """Sets the name of this OperationModel.


        :param name: The name of this OperationModel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        
        self._name = name
    
    @property
    def inputs(self) -> List[str]:
        """Gets the inputs of this OperationModel.


        :return: The inputs of this OperationModel.
        :rtype: List[str]
        """
        return self._inputs
    
    @inputs.setter
    def inputs(self, inputs: List[str]):
        """Sets the inputs of this OperationModel.


        :param inputs: The inputs of this OperationModel.
        :type inputs: List[str]
        """
        if inputs is None:
            raise ValueError("Invalid value for `inputs`, must not be `None`")  # noqa: E501
        
        self._inputs = inputs
    
    @property
    def outputs(self) -> List[str]:
        """Gets the outputs of this OperationModel.


        :return: The outputs of this OperationModel.
        :rtype: List[str]
        """
        return self._outputs
    
    @outputs.setter
    def outputs(self, outputs: List[str]):
        """Sets the outputs of this OperationModel.


        :param outputs: The outputs of this OperationModel.
        :type outputs: List[str]
        """
        if outputs is None:
            raise ValueError("Invalid value for `outputs`, must not be `None`")  # noqa: E501
        
        self._outputs = outputs
