# coding: utf-8

from __future__ import absolute_import

from swagger_server import util
from swagger_server.models.base_constraint_model_kms import KMSBaseConstraintModel
from swagger_server.models.base_model_ import Model


class BaseConstraintModel(Model, KMSBaseConstraintModel):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    
    def __init__(self, name: str = None, operation: str = None):  # noqa: E501
        """BaseConstraintModel - a model defined in Swagger

        :param name: The name of this BaseConstraintModel.  # noqa: E501
        :type name: str
        :param operation: The operation of this BaseConstraintModel.  # noqa: E501
        :type operation: str
        """
        self.swagger_types = {
            'name': str,
            'operation': str
        }
        
        self.attribute_map = {
            'name': 'name',
            'operation': 'operation'
        }
        self._name = name
        self._operation = operation
    
    @classmethod
    def from_dict(cls, dikt) -> 'BaseConstraintModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BaseConstraintModel of this BaseConstraintModel.  # noqa: E501
        :rtype: BaseConstraintModel
        """
        return util.deserialize_model(dikt, cls)
    
    @property
    def name(self) -> str:
        """Gets the name of this BaseConstraintModel.


        :return: The name of this BaseConstraintModel.
        :rtype: str
        """
        return self._name
    
    @name.setter
    def name(self, name: str):
        """Sets the name of this BaseConstraintModel.


        :param name: The name of this BaseConstraintModel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        
        self._name = name
    
    @property
    def operation(self) -> str:
        """Gets the operation of this BaseConstraintModel.


        :return: The operation of this BaseConstraintModel.
        :rtype: str
        """
        return self._operation
    
    @operation.setter
    def operation(self, operation: str):
        """Sets the operation of this BaseConstraintModel.


        :param operation: The operation of this BaseConstraintModel.
        :type operation: str
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501
        
        self._operation = operation
