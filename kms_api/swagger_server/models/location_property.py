# coding: utf-8

from __future__ import absolute_import

from swagger_server import util
from swagger_server.models.base_model_ import Model
from swagger_server.models.indoor_position_value import IndoorPositionValue  # noqa: F401,E501
from swagger_server.models.location_property_kms import KMSLocationProperty
from swagger_server.models.position_value import PositionValue  # noqa: F401,E501


class LocationProperty(Model, KMSLocationProperty):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    
    def __init__(self, identifier: str = None, type: str = None, name: str = None, level: int = None,
                 position: PositionValue = None, indoorposition: IndoorPositionValue = None):  # noqa: E501
        """LocationProperty - a model defined in Swagger

        :param identifier: The identifier of this LocationProperty.  # noqa: E501
        :type identifier: str
        :param type: The type of this LocationProperty.  # noqa: E501
        :type type: str
        :param name: The name of this LocationProperty.  # noqa: E501
        :type name: str
        :param level: The level of this LocationProperty.  # noqa: E501
        :type level: int
        :param position: The position of this LocationProperty.  # noqa: E501
        :type position: PositionValue
        :param indoorposition: The indoorposition of this LocationProperty.  # noqa: E501
        :type indoorposition: IndoorPositionValue
        """
        self.swagger_types = {
            'identifier': str,
            'type': str,
            'name': str,
            'level': int,
            'position': PositionValue,
            'indoorposition': IndoorPositionValue
        }
        
        self.attribute_map = {
            'identifier': 'identifier',
            'type': 'type',
            'name': 'name',
            'level': 'level',
            'position': 'position',
            'indoorposition': 'indoorposition'
        }
        self._identifier = identifier
        self._type = type
        self._name = name
        self._level = level
        self._position = position
        self._indoorposition = indoorposition
    
    @classmethod
    def from_dict(cls, dikt) -> 'LocationProperty':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LocationProperty of this LocationProperty.  # noqa: E501
        :rtype: LocationProperty
        """
        return util.deserialize_model(dikt, cls)
    
    @property
    def identifier(self) -> str:
        """Gets the identifier of this LocationProperty.

        []  # noqa: E501

        :return: The identifier of this LocationProperty.
        :rtype: str
        """
        return self._identifier
    
    @identifier.setter
    def identifier(self, identifier: str):
        """Sets the identifier of this LocationProperty.

        []  # noqa: E501

        :param identifier: The identifier of this LocationProperty.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501
        
        self._identifier = identifier
    
    @property
    def type(self) -> str:
        """Gets the type of this LocationProperty.

        []  # noqa: E501

        :return: The type of this LocationProperty.
        :rtype: str
        """
        return self._type
    
    @type.setter
    def type(self, type: str):
        """Sets the type of this LocationProperty.

        []  # noqa: E501

        :param type: The type of this LocationProperty.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        
        self._type = type
    
    @property
    def name(self) -> str:
        """Gets the name of this LocationProperty.

        []  # noqa: E501

        :return: The name of this LocationProperty.
        :rtype: str
        """
        return self._name
    
    @name.setter
    def name(self, name: str):
        """Sets the name of this LocationProperty.

        []  # noqa: E501

        :param name: The name of this LocationProperty.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        
        self._name = name
    
    @property
    def level(self) -> int:
        """Gets the level of this LocationProperty.

        []  # noqa: E501

        :return: The level of this LocationProperty.
        :rtype: int
        """
        return self._level
    
    @level.setter
    def level(self, level: int):
        """Sets the level of this LocationProperty.

        []  # noqa: E501

        :param level: The level of this LocationProperty.
        :type level: int
        """
        if level is None:
            raise ValueError("Invalid value for `level`, must not be `None`")  # noqa: E501
        
        self._level = level
    
    @property
    def position(self) -> PositionValue:
        """Gets the position of this LocationProperty.


        :return: The position of this LocationProperty.
        :rtype: PositionValue
        """
        return self._position
    
    @position.setter
    def position(self, position: PositionValue):
        """Sets the position of this LocationProperty.


        :param position: The position of this LocationProperty.
        :type position: PositionValue
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")  # noqa: E501
        
        self._position = position
    
    @property
    def indoorposition(self) -> IndoorPositionValue:
        """Gets the indoorposition of this LocationProperty.


        :return: The indoorposition of this LocationProperty.
        :rtype: IndoorPositionValue
        """
        return self._indoorposition
    
    @indoorposition.setter
    def indoorposition(self, indoorposition: IndoorPositionValue):
        """Sets the indoorposition of this LocationProperty.


        :param indoorposition: The indoorposition of this LocationProperty.
        :type indoorposition: IndoorPositionValue
        """
        if indoorposition is None:
            raise ValueError("Invalid value for `indoorposition`, must not be `None`")  # noqa: E501
        
        self._indoorposition = indoorposition
