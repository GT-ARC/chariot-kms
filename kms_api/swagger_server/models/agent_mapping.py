# coding: utf-8

from __future__ import absolute_import

from swagger_server import util
from swagger_server.models.agent_mapping_kms import AgentMappingKMS
from swagger_server.models.base_model_ import Model


class AgentMapping(Model, AgentMappingKMS):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    
    def __init__(self, id: str = None, agent_id: str = None, device_id: str = None):  # noqa: E501
        """AgentMapping - a model defined in Swagger

        :param id: The id of this AgentMapping.  # noqa: E501
        :type id: str
        :param agent_id: The agent_id of this AgentMapping.  # noqa: E501
        :type agent_id: str
        :param device_id: The device_id of this AgentMapping.  # noqa: E501
        :type device_id: str
        """
        self.swagger_types = {
            'id': str,
            'agent_id': str,
            'device_id': str
        }
        
        self.attribute_map = {
            'id': '_id',
            'agent_id': 'agent_id',
            'device_id': 'device_id'
        }
        self._id = id
        self._agent_id = agent_id
        self._device_id = device_id
    
    @classmethod
    def from_dict(cls, dikt) -> 'AgentMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AgentMapping of this AgentMapping.  # noqa: E501
        :rtype: AgentMapping
        """
        return util.deserialize_model(dikt, cls)
    
    @property
    def id(self) -> str:
        """Gets the id of this AgentMapping.


        :return: The id of this AgentMapping.
        :rtype: str
        """
        return self._id
    
    @id.setter
    def id(self, id: str):
        """Sets the id of this AgentMapping.


        :param id: The id of this AgentMapping.
        :type id: str
        """
        
        self._id = id
    
    @property
    def agent_id(self) -> str:
        """Gets the agent_id of this AgentMapping.


        :return: The agent_id of this AgentMapping.
        :rtype: str
        """
        return self._agent_id
    
    @agent_id.setter
    def agent_id(self, agent_id: str):
        """Sets the agent_id of this AgentMapping.


        :param agent_id: The agent_id of this AgentMapping.
        :type agent_id: str
        """
        if agent_id is None:
            raise ValueError("Invalid value for `agent_id`, must not be `None`")  # noqa: E501
        
        self._agent_id = agent_id
    
    @property
    def device_id(self) -> str:
        """Gets the device_id of this AgentMapping.


        :return: The device_id of this AgentMapping.
        :rtype: str
        """
        return self._device_id
    
    @device_id.setter
    def device_id(self, device_id: str):
        """Sets the device_id of this AgentMapping.


        :param device_id: The device_id of this AgentMapping.
        :type device_id: str
        """
        if device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")  # noqa: E501
        
        self._device_id = device_id
