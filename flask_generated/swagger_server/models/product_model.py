# coding: utf-8

from __future__ import absolute_import

from typing import List  # noqa: F401

from swagger_server import util
from swagger_server.models.base_model_ import Model
from swagger_server.models.constraint_model import ConstraintModel
from swagger_server.models.product_model_kms import KMSProductModel
from swagger_server.models.production_flow_item import ProductionFlowItem  # noqa: F401,E501
from swagger_server.models.production_info_item import ProductionInfoItem  # noqa: F401,E501


class ProductModel(Model, KMSProductModel):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    
    def __init__(self, uuid: str = None, category: str = None, stored_container: str = None, identifier: str = None,
                 product_add_info: str = None, product_name: str = None, weight: float = None,
                 energy_used: float = None, delivery_date: int = None, status_information: str = None,
                 status: str = None, state: bool = None, image: str = None,
                 production_flow: List[ProductionFlowItem] = None, product_info: List[ProductionInfoItem] = None,
                 constraints: List[ConstraintModel] = None):  # noqa: E501
        """ProductModel - a model defined in Swagger

        :param uuid: The uuid of this ProductModel.  # noqa: E501
        :type uuid: str
        :param category: The category of this ProductModel.  # noqa: E501
        :type category: str
        :param stored_container: The stored_container of this ProductModel.  # noqa: E501
        :type stored_container: str
        :param identifier: The identifier of this ProductModel.  # noqa: E501
        :type identifier: str
        :param product_add_info: The product_add_info of this ProductModel.  # noqa: E501
        :type product_add_info: str
        :param product_name: The product_name of this ProductModel.  # noqa: E501
        :type product_name: str
        :param weight: The weight of this ProductModel.  # noqa: E501
        :type weight: float
        :param energy_used: The energy_used of this ProductModel.  # noqa: E501
        :type energy_used: float
        :param delivery_date: The delivery_date of this ProductModel.  # noqa: E501
        :type delivery_date: int
        :param status_information: The status_information of this ProductModel.  # noqa: E501
        :type status_information: str
        :param status: The status of this ProductModel.  # noqa: E501
        :type status: str
        :param state: The state of this ProductModel.  # noqa: E501
        :type state: bool
        :param image: The image of this ProductModel.  # noqa: E501
        :type image: str
        :param production_flow: The production_flow of this ProductModel.  # noqa: E501
        :type production_flow: List[ProductionFlowItem]
        :param product_info: The product_info of this ProductModel.  # noqa: E501
        :type product_info: List[ProductionInfoItem]
        :param constraints: The constraints of this ProductModel.  # noqa: E501
        :type constraints: List[ConstraintModel]
        """
        self.swagger_types = {
            'uuid': str,
            'category': str,
            'stored_container': str,
            'identifier': str,
            'product_add_info': str,
            'product_name': str,
            'weight': float,
            'energy_used': float,
            'delivery_date': int,
            'status_information': str,
            'status': str,
            'state': bool,
            'image': str,
            'production_flow': List[ProductionFlowItem],
            'product_info': List[ProductionInfoItem],
            'constraints': List[ConstraintModel]
        }
        
        self.attribute_map = {
            'uuid': 'uuid',
            'category': 'category',
            'stored_container': 'storedContainer',
            'identifier': 'identifier',
            'product_add_info': 'productAddInfo',
            'product_name': 'productName',
            'weight': 'weight',
            'energy_used': 'energyUsed',
            'delivery_date': 'deliveryDate',
            'status_information': 'statusInformation',
            'status': 'status',
            'state': 'state',
            'image': 'image',
            'production_flow': 'productionFlow',
            'product_info': 'productInfo',
            'constraints': 'constraints'
        }
        self._uuid = uuid
        self._category = category
        self._stored_container = stored_container
        self._identifier = identifier
        self._product_add_info = product_add_info
        self._product_name = product_name
        self._weight = weight
        self._energy_used = energy_used
        self._delivery_date = delivery_date
        self._status_information = status_information
        self._status = status
        self._state = state
        self._image = image
        self._production_flow = production_flow
        self._product_info = product_info
        self._constraints = constraints
    
    @classmethod
    def from_dict(cls, dikt) -> 'ProductModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProductModel of this ProductModel.  # noqa: E501
        :rtype: ProductModel
        """
        return util.deserialize_model(dikt, cls)
    
    @property
    def uuid(self) -> str:
        """Gets the uuid of this ProductModel.


        :return: The uuid of this ProductModel.
        :rtype: str
        """
        return self._uuid
    
    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this ProductModel.


        :param uuid: The uuid of this ProductModel.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501
        
        self._uuid = uuid
    
    @property
    def category(self) -> str:
        """Gets the category of this ProductModel.


        :return: The category of this ProductModel.
        :rtype: str
        """
        return self._category
    
    @category.setter
    def category(self, category: str):
        """Sets the category of this ProductModel.


        :param category: The category of this ProductModel.
        :type category: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501
        
        self._category = category
    
    @property
    def stored_container(self) -> str:
        """Gets the stored_container of this ProductModel.


        :return: The stored_container of this ProductModel.
        :rtype: str
        """
        return self._stored_container
    
    @stored_container.setter
    def stored_container(self, stored_container: str):
        """Sets the stored_container of this ProductModel.


        :param stored_container: The stored_container of this ProductModel.
        :type stored_container: str
        """
        if stored_container is None:
            raise ValueError("Invalid value for `stored_container`, must not be `None`")  # noqa: E501
        
        self._stored_container = stored_container
    
    @property
    def identifier(self) -> str:
        """Gets the identifier of this ProductModel.


        :return: The identifier of this ProductModel.
        :rtype: str
        """
        return self._identifier
    
    @identifier.setter
    def identifier(self, identifier: str):
        """Sets the identifier of this ProductModel.


        :param identifier: The identifier of this ProductModel.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501
        
        self._identifier = identifier
    
    @property
    def product_add_info(self) -> str:
        """Gets the product_add_info of this ProductModel.


        :return: The product_add_info of this ProductModel.
        :rtype: str
        """
        return self._product_add_info
    
    @product_add_info.setter
    def product_add_info(self, product_add_info: str):
        """Sets the product_add_info of this ProductModel.


        :param product_add_info: The product_add_info of this ProductModel.
        :type product_add_info: str
        """
        if product_add_info is None:
            raise ValueError("Invalid value for `product_add_info`, must not be `None`")  # noqa: E501
        
        self._product_add_info = product_add_info
    
    @property
    def product_name(self) -> str:
        """Gets the product_name of this ProductModel.


        :return: The product_name of this ProductModel.
        :rtype: str
        """
        return self._product_name
    
    @product_name.setter
    def product_name(self, product_name: str):
        """Sets the product_name of this ProductModel.


        :param product_name: The product_name of this ProductModel.
        :type product_name: str
        """
        if product_name is None:
            raise ValueError("Invalid value for `product_name`, must not be `None`")  # noqa: E501
        
        self._product_name = product_name
    
    @property
    def weight(self) -> float:
        """Gets the weight of this ProductModel.


        :return: The weight of this ProductModel.
        :rtype: float
        """
        return self._weight
    
    @weight.setter
    def weight(self, weight: float):
        """Sets the weight of this ProductModel.


        :param weight: The weight of this ProductModel.
        :type weight: float
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")  # noqa: E501
        
        self._weight = weight
    
    @property
    def energy_used(self) -> float:
        """Gets the energy_used of this ProductModel.


        :return: The energy_used of this ProductModel.
        :rtype: float
        """
        return self._energy_used
    
    @energy_used.setter
    def energy_used(self, energy_used: float):
        """Sets the energy_used of this ProductModel.


        :param energy_used: The energy_used of this ProductModel.
        :type energy_used: float
        """
        if energy_used is None:
            raise ValueError("Invalid value for `energy_used`, must not be `None`")  # noqa: E501
        
        self._energy_used = energy_used
    
    @property
    def delivery_date(self) -> int:
        """Gets the delivery_date of this ProductModel.


        :return: The delivery_date of this ProductModel.
        :rtype: int
        """
        return self._delivery_date
    
    @delivery_date.setter
    def delivery_date(self, delivery_date: int):
        """Sets the delivery_date of this ProductModel.


        :param delivery_date: The delivery_date of this ProductModel.
        :type delivery_date: int
        """
        if delivery_date is None:
            raise ValueError("Invalid value for `delivery_date`, must not be `None`")  # noqa: E501
        
        self._delivery_date = delivery_date
    
    @property
    def status_information(self) -> str:
        """Gets the status_information of this ProductModel.


        :return: The status_information of this ProductModel.
        :rtype: str
        """
        return self._status_information
    
    @status_information.setter
    def status_information(self, status_information: str):
        """Sets the status_information of this ProductModel.


        :param status_information: The status_information of this ProductModel.
        :type status_information: str
        """
        if status_information is None:
            raise ValueError("Invalid value for `status_information`, must not be `None`")  # noqa: E501
        
        self._status_information = status_information
    
    @property
    def status(self) -> str:
        """Gets the status of this ProductModel.


        :return: The status of this ProductModel.
        :rtype: str
        """
        return self._status
    
    @status.setter
    def status(self, status: str):
        """Sets the status of this ProductModel.


        :param status: The status of this ProductModel.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        
        self._status = status
    
    @property
    def state(self) -> bool:
        """Gets the state of this ProductModel.


        :return: The state of this ProductModel.
        :rtype: bool
        """
        return self._state
    
    @state.setter
    def state(self, state: bool):
        """Sets the state of this ProductModel.


        :param state: The state of this ProductModel.
        :type state: bool
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        
        self._state = state
    
    @property
    def image(self) -> str:
        """Gets the image of this ProductModel.


        :return: The image of this ProductModel.
        :rtype: str
        """
        return self._image
    
    @image.setter
    def image(self, image: str):
        """Sets the image of this ProductModel.


        :param image: The image of this ProductModel.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501
        
        self._image = image
    
    @property
    def production_flow(self) -> List[ProductionFlowItem]:
        """Gets the production_flow of this ProductModel.


        :return: The production_flow of this ProductModel.
        :rtype: List[ProductionFlowItem]
        """
        return self._production_flow
    
    @production_flow.setter
    def production_flow(self, production_flow: List[ProductionFlowItem]):
        """Sets the production_flow of this ProductModel.


        :param production_flow: The production_flow of this ProductModel.
        :type production_flow: List[ProductionFlowItem]
        """
        if production_flow is None:
            raise ValueError("Invalid value for `production_flow`, must not be `None`")  # noqa: E501
        
        self._production_flow = production_flow
    
    @property
    def product_info(self) -> List[ProductionInfoItem]:
        """Gets the product_info of this ProductModel.


        :return: The product_info of this ProductModel.
        :rtype: List[ProductionInfoItem]
        """
        return self._product_info
    
    @product_info.setter
    def product_info(self, product_info: List[ProductionInfoItem]):
        """Sets the product_info of this ProductModel.


        :param product_info: The product_info of this ProductModel.
        :type product_info: List[ProductionInfoItem]
        """
        if product_info is None:
            raise ValueError("Invalid value for `product_info`, must not be `None`")  # noqa: E501
        
        self._product_info = product_info
    
    @property
    def constraints(self) -> List[ConstraintModel]:
        """Gets the constraints of this ProductModel.


        :return: The constraints of this ProductModel.
        :rtype: List[ConstraintModel]
        """
        return self._constraints
    
    @constraints.setter
    def constraints(self, constraints: List[ConstraintModel]):
        """Sets the constraints of this ProductModel.


        :param constraints: The constraints of this ProductModel.
        :type constraints: List[ConstraintModel]
        """
        if constraints is None:
            raise ValueError("Invalid value for `constraints`, must not be `None`")  # noqa: E501
        
        self._constraints = constraints
