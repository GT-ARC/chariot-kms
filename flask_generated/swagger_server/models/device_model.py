# coding: utf-8

from __future__ import absolute_import

from typing import List  # noqa: F401

from swagger_server import util
from swagger_server.models.base_model_ import Model
from swagger_server.models.device_model_kms import KMSDeviceModel
from swagger_server.models.device_property_model import DevicePropertyModel  # noqa: F401,E501
from swagger_server.models.location_property import LocationProperty  # noqa: F401,E501
from swagger_server.models.operation_model import OperationModel


class DeviceModel(Model, KMSDeviceModel):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    
    def __init__(self, identifier: str = None, securitykey: str = None, ip: str = None, re_id: str = None,
                 location: LocationProperty = None, group_id: str = None, object_type: str = None, name: str = None,
                 uuid: str = None, kafka_topic: str = None, id: str = None,
                 properties: List[DevicePropertyModel] = None, operations: List[OperationModel] = None):  # noqa: E501
        """DeviceModel - a model defined in Swagger

        :param identifier: The identifier of this DeviceModel.  # noqa: E501
        :type identifier: str
        :param securitykey: The securitykey of this DeviceModel.  # noqa: E501
        :type securitykey: str
        :param ip: The ip of this DeviceModel.  # noqa: E501
        :type ip: str
        :param re_id: The re_id of this DeviceModel.  # noqa: E501
        :type re_id: str
        :param location: The location of this DeviceModel.  # noqa: E501
        :type location: LocationProperty
        :param group_id: The group_id of this DeviceModel.  # noqa: E501
        :type group_id: str
        :param object_type: The object_type of this DeviceModel.  # noqa: E501
        :type object_type: str
        :param name: The name of this DeviceModel.  # noqa: E501
        :type name: str
        :param uuid: The uuid of this DeviceModel.  # noqa: E501
        :type uuid: str
        :param kafka_topic: The kafka_topic of this DeviceModel.  # noqa: E501
        :type kafka_topic: str
        :param id: The id of this DeviceModel.  # noqa: E501
        :type id: str
        :param properties: The properties of this DeviceModel.  # noqa: E501
        :type properties: List[DevicePropertyModel]
        :param operations: The operations of this DeviceModel.  # noqa: E501
        :type operations: List[OperationModel]
        """
        self.swagger_types = {
            'identifier': str,
            'securitykey': str,
            'ip': str,
            're_id': str,
            'location': LocationProperty,
            'group_id': str,
            'object_type': str,
            'name': str,
            'uuid': str,
            'kafka_topic': str,
            'id': str,
            'properties': List[DevicePropertyModel],
            'operations': List[OperationModel]
        }
        
        self.attribute_map = {
            'identifier': 'identifier',
            'securitykey': 'securitykey',
            'ip': 'ip',
            're_id': 'reId',
            'location': 'location',
            'group_id': 'groupId',
            'object_type': 'objectType',
            'name': 'name',
            'uuid': 'uuid',
            'kafka_topic': 'kafka_topic',
            'id': '_id',
            'properties': 'properties',
            'operations': 'operations'
        }
        self._identifier = identifier
        self._securitykey = securitykey
        self._ip = ip
        self._re_id = re_id
        self._location = location
        self._group_id = group_id
        self._object_type = object_type
        self._name = name
        self._uuid = uuid
        self._kafka_topic = kafka_topic
        self._id = id
        self._properties = properties
        self._operations = operations
    
    @classmethod
    def from_dict(cls, dikt) -> 'DeviceModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DeviceModel of this DeviceModel.  # noqa: E501
        :rtype: DeviceModel
        """
        return util.deserialize_model(dikt, cls)
    
    @property
    def identifier(self) -> str:
        """Gets the identifier of this DeviceModel.


        :return: The identifier of this DeviceModel.
        :rtype: str
        """
        return self._identifier
    
    @identifier.setter
    def identifier(self, identifier: str):
        """Sets the identifier of this DeviceModel.


        :param identifier: The identifier of this DeviceModel.
        :type identifier: str
        """
        
        self._identifier = identifier
    
    @property
    def securitykey(self) -> str:
        """Gets the securitykey of this DeviceModel.


        :return: The securitykey of this DeviceModel.
        :rtype: str
        """
        return self._securitykey
    
    @securitykey.setter
    def securitykey(self, securitykey: str):
        """Sets the securitykey of this DeviceModel.


        :param securitykey: The securitykey of this DeviceModel.
        :type securitykey: str
        """
        if securitykey is None:
            raise ValueError("Invalid value for `securitykey`, must not be `None`")  # noqa: E501
        
        self._securitykey = securitykey
    
    @property
    def ip(self) -> str:
        """Gets the ip of this DeviceModel.


        :return: The ip of this DeviceModel.
        :rtype: str
        """
        return self._ip
    
    @ip.setter
    def ip(self, ip: str):
        """Sets the ip of this DeviceModel.


        :param ip: The ip of this DeviceModel.
        :type ip: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501
        
        self._ip = ip
    
    @property
    def re_id(self) -> str:
        """Gets the re_id of this DeviceModel.


        :return: The re_id of this DeviceModel.
        :rtype: str
        """
        return self._re_id
    
    @re_id.setter
    def re_id(self, re_id: str):
        """Sets the re_id of this DeviceModel.


        :param re_id: The re_id of this DeviceModel.
        :type re_id: str
        """
        
        self._re_id = re_id
    
    @property
    def location(self) -> LocationProperty:
        """Gets the location of this DeviceModel.


        :return: The location of this DeviceModel.
        :rtype: LocationProperty
        """
        return self._location
    
    @location.setter
    def location(self, location: LocationProperty):
        """Sets the location of this DeviceModel.


        :param location: The location of this DeviceModel.
        :type location: LocationProperty
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501
        
        self._location = location
    
    @property
    def group_id(self) -> str:
        """Gets the group_id of this DeviceModel.


        :return: The group_id of this DeviceModel.
        :rtype: str
        """
        return self._group_id
    
    @group_id.setter
    def group_id(self, group_id: str):
        """Sets the group_id of this DeviceModel.


        :param group_id: The group_id of this DeviceModel.
        :type group_id: str
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")  # noqa: E501
        
        self._group_id = group_id
    
    @property
    def object_type(self) -> str:
        """Gets the object_type of this DeviceModel.


        :return: The object_type of this DeviceModel.
        :rtype: str
        """
        return self._object_type
    
    @object_type.setter
    def object_type(self, object_type: str):
        """Sets the object_type of this DeviceModel.


        :param object_type: The object_type of this DeviceModel.
        :type object_type: str
        """
        allowed_values = ["actuator", "sensor", "human", "service", "skill", "task", "action", "healthdata",
                          "humanrole", "message", "permission", "preference", "property"]  # noqa: E501
        if object_type not in allowed_values:
            raise ValueError(
                "Invalid value for `object_type` ({0}), must be one of {1}"
                    .format(object_type, allowed_values)
            )
        
        self._object_type = object_type
    
    @property
    def name(self) -> str:
        """Gets the name of this DeviceModel.

        []  # noqa: E501

        :return: The name of this DeviceModel.
        :rtype: str
        """
        return self._name
    
    @name.setter
    def name(self, name: str):
        """Sets the name of this DeviceModel.

        []  # noqa: E501

        :param name: The name of this DeviceModel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        
        self._name = name
    
    @property
    def uuid(self) -> str:
        """Gets the uuid of this DeviceModel.

        []  # noqa: E501

        :return: The uuid of this DeviceModel.
        :rtype: str
        """
        return self._uuid
    
    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this DeviceModel.

        []  # noqa: E501

        :param uuid: The uuid of this DeviceModel.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501
        
        self._uuid = uuid
    
    @property
    def kafka_topic(self) -> str:
        """Gets the kafka_topic of this DeviceModel.

        []  # noqa: E501

        :return: The kafka_topic of this DeviceModel.
        :rtype: str
        """
        return self._kafka_topic
    
    @kafka_topic.setter
    def kafka_topic(self, kafka_topic: str):
        """Sets the kafka_topic of this DeviceModel.

        []  # noqa: E501

        :param kafka_topic: The kafka_topic of this DeviceModel.
        :type kafka_topic: str
        """
        
        self._kafka_topic = kafka_topic
    
    @property
    def id(self) -> str:
        """Gets the id of this DeviceModel.

        []  # noqa: E501

        :return: The id of this DeviceModel.
        :rtype: str
        """
        return self._id
    
    @id.setter
    def id(self, id: str):
        """Sets the id of this DeviceModel.

        []  # noqa: E501

        :param id: The id of this DeviceModel.
        :type id: str
        """
        
        self._id = id
    
    @property
    def properties(self) -> List[DevicePropertyModel]:
        """Gets the properties of this DeviceModel.


        :return: The properties of this DeviceModel.
        :rtype: List[DevicePropertyModel]
        """
        return self._properties
    
    @properties.setter
    def properties(self, properties: List[DevicePropertyModel]):
        """Sets the properties of this DeviceModel.


        :param properties: The properties of this DeviceModel.
        :type properties: List[DevicePropertyModel]
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501
        
        self._properties = properties
    
    @property
    def operations(self) -> List[OperationModel]:
        """Gets the operations of this DeviceModel.


        :return: The operations of this DeviceModel.
        :rtype: List[OperationModel]
        """
        return self._operations
    
    @operations.setter
    def operations(self, operations: List[OperationModel]):
        """Sets the operations of this DeviceModel.


        :param operations: The operations of this DeviceModel.
        :type operations: List[OperationModel]
        """
        
        self._operations = operations
