# coding: utf-8

from __future__ import absolute_import

from swagger_server import util
from swagger_server.models.base_model_ import Model


class SecurityMixin(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    
    def __init__(self, identifier: str = None, securitykey: str = None, ip: str = None):  # noqa: E501
        """SecurityMixin - a model defined in Swagger

        :param identifier: The identifier of this SecurityMixin.  # noqa: E501
        :type identifier: str
        :param securitykey: The securitykey of this SecurityMixin.  # noqa: E501
        :type securitykey: str
        :param ip: The ip of this SecurityMixin.  # noqa: E501
        :type ip: str
        """
        self.swagger_types = {
            'identifier': str,
            'securitykey': str,
            'ip': str
        }
        
        self.attribute_map = {
            'identifier': 'identifier',
            'securitykey': 'securitykey',
            'ip': 'ip'
        }
        self._identifier = identifier
        self._securitykey = securitykey
        self._ip = ip
    
    @classmethod
    def from_dict(cls, dikt) -> 'SecurityMixin':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SecurityMixin of this SecurityMixin.  # noqa: E501
        :rtype: SecurityMixin
        """
        return util.deserialize_model(dikt, cls)
    
    @property
    def identifier(self) -> str:
        """Gets the identifier of this SecurityMixin.

        []  # noqa: E501

        :return: The identifier of this SecurityMixin.
        :rtype: str
        """
        return self._identifier
    
    @identifier.setter
    def identifier(self, identifier: str):
        """Sets the identifier of this SecurityMixin.

        []  # noqa: E501

        :param identifier: The identifier of this SecurityMixin.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501
        
        self._identifier = identifier
    
    @property
    def securitykey(self) -> str:
        """Gets the securitykey of this SecurityMixin.

        []  # noqa: E501

        :return: The securitykey of this SecurityMixin.
        :rtype: str
        """
        return self._securitykey
    
    @securitykey.setter
    def securitykey(self, securitykey: str):
        """Sets the securitykey of this SecurityMixin.

        []  # noqa: E501

        :param securitykey: The securitykey of this SecurityMixin.
        :type securitykey: str
        """
        if securitykey is None:
            raise ValueError("Invalid value for `securitykey`, must not be `None`")  # noqa: E501
        
        self._securitykey = securitykey
    
    @property
    def ip(self) -> str:
        """Gets the ip of this SecurityMixin.

        []  # noqa: E501

        :return: The ip of this SecurityMixin.
        :rtype: str
        """
        return self._ip
    
    @ip.setter
    def ip(self, ip: str):
        """Sets the ip of this SecurityMixin.

        []  # noqa: E501

        :param ip: The ip of this SecurityMixin.
        :type ip: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501
        
        self._ip = ip
