# coding: utf-8

from __future__ import absolute_import

from swagger_server import util
from swagger_server.models.base_model_ import Model
from swagger_server.models.indoor_position_value_kms import KMSIndoorPositionValue


class IndoorPositionValue(Model, KMSIndoorPositionValue):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    
    def __init__(self, indoorlat: float = None, indoorlng: float = None):  # noqa: E501
        """IndoorPositionValue - a model defined in Swagger

        :param indoorlat: The indoorlat of this IndoorPositionValue.  # noqa: E501
        :type indoorlat: float
        :param indoorlng: The indoorlng of this IndoorPositionValue.  # noqa: E501
        :type indoorlng: float
        """
        self.swagger_types = {
            'indoorlat': float,
            'indoorlng': float
        }
        
        self.attribute_map = {
            'indoorlat': 'indoorlat',
            'indoorlng': 'indoorlng'
        }
        self._indoorlat = indoorlat
        self._indoorlng = indoorlng
    
    @classmethod
    def from_dict(cls, dikt) -> 'IndoorPositionValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IndoorPositionValue of this IndoorPositionValue.  # noqa: E501
        :rtype: IndoorPositionValue
        """
        return util.deserialize_model(dikt, cls)
    
    @property
    def indoorlat(self) -> float:
        """Gets the indoorlat of this IndoorPositionValue.

        []  # noqa: E501

        :return: The indoorlat of this IndoorPositionValue.
        :rtype: float
        """
        return self._indoorlat
    
    @indoorlat.setter
    def indoorlat(self, indoorlat: float):
        """Sets the indoorlat of this IndoorPositionValue.

        []  # noqa: E501

        :param indoorlat: The indoorlat of this IndoorPositionValue.
        :type indoorlat: float
        """
        if indoorlat is None:
            raise ValueError("Invalid value for `indoorlat`, must not be `None`")  # noqa: E501
        
        self._indoorlat = indoorlat
    
    @property
    def indoorlng(self) -> float:
        """Gets the indoorlng of this IndoorPositionValue.

        []  # noqa: E501

        :return: The indoorlng of this IndoorPositionValue.
        :rtype: float
        """
        return self._indoorlng
    
    @indoorlng.setter
    def indoorlng(self, indoorlng: float):
        """Sets the indoorlng of this IndoorPositionValue.

        []  # noqa: E501

        :param indoorlng: The indoorlng of this IndoorPositionValue.
        :type indoorlng: float
        """
        if indoorlng is None:
            raise ValueError("Invalid value for `indoorlng`, must not be `None`")  # noqa: E501
        
        self._indoorlng = indoorlng
