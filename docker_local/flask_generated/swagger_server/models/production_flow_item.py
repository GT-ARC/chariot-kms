# coding: utf-8

from __future__ import absolute_import

from typing import List  # noqa: F401

from swagger_server import util
from swagger_server.models.base_model_ import Model
from swagger_server.models.production_flow_item_kms import KMSProductionFlowItem
from swagger_server.models.production_flow_item_property import ProductionFlowItemProperty  # noqa: F401,E501


class ProductionFlowItem(Model, KMSProductionFlowItem):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    
    def __init__(self, uuid: str = None, name: str = None, icon: str = None, progress: float = None,
                 paused: bool = None, total: float = None, running: float = None,
                 properties: List[ProductionFlowItemProperty] = None):  # noqa: E501
        """ProductionFlowItem - a model defined in Swagger

        :param uuid: The uuid of this ProductionFlowItem.  # noqa: E501
        :type uuid: str
        :param name: The name of this ProductionFlowItem.  # noqa: E501
        :type name: str
        :param icon: The icon of this ProductionFlowItem.  # noqa: E501
        :type icon: str
        :param progress: The progress of this ProductionFlowItem.  # noqa: E501
        :type progress: float
        :param paused: The paused of this ProductionFlowItem.  # noqa: E501
        :type paused: bool
        :param total: The total of this ProductionFlowItem.  # noqa: E501
        :type total: float
        :param running: The running of this ProductionFlowItem.  # noqa: E501
        :type running: float
        :param properties: The properties of this ProductionFlowItem.  # noqa: E501
        :type properties: List[ProductionFlowItemProperty]
        """
        self.swagger_types = {
            'name': str,
            'icon': str,
            'progress': float,
            'paused': bool,
            'total': float,
            'running': float,
            'properties': List[ProductionFlowItemProperty]
        }
        
        self.attribute_map = {
            'name': 'name',
            'icon': 'icon',
            'progress': 'progress',
            'paused': 'paused',
            'total': 'total',
            'running': 'running',
            'properties': 'properties'
        }
        self._uuid = uuid
        self._name = name
        self._icon = icon
        self._progress = progress
        self._paused = paused
        self._total = total
        self._running = running
        self._properties = properties
    
    @classmethod
    def from_dict(cls, dikt) -> 'ProductionFlowItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProductionFlowItem of this ProductionFlowItem.  # noqa: E501
        :rtype: ProductionFlowItem
        """
        return util.deserialize_model(dikt, cls)
    
    @property
    def uuid(self) -> str:
        """Gets the uuid of this ProductionFlowItem.


        :return: The uuid of this ProductionFlowItem.
        :rtype: str
        """
        return self._uuid
    
    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this ProductionFlowItem.


        :param uuid: The uuid of this ProductionFlowItem.
        :type uuid: str
        """
        
        self._uuid = uuid
    
    @property
    def name(self) -> str:
        """Gets the name of this ProductionFlowItem.


        :return: The name of this ProductionFlowItem.
        :rtype: str
        """
        return self._name
    
    @name.setter
    def name(self, name: str):
        """Sets the name of this ProductionFlowItem.


        :param name: The name of this ProductionFlowItem.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        
        self._name = name
    
    @property
    def icon(self) -> str:
        """Gets the icon of this ProductionFlowItem.


        :return: The icon of this ProductionFlowItem.
        :rtype: str
        """
        return self._icon
    
    @icon.setter
    def icon(self, icon: str):
        """Sets the icon of this ProductionFlowItem.


        :param icon: The icon of this ProductionFlowItem.
        :type icon: str
        """
        if icon is None:
            raise ValueError("Invalid value for `icon`, must not be `None`")  # noqa: E501
        
        self._icon = icon
    
    @property
    def progress(self) -> float:
        """Gets the progress of this ProductionFlowItem.


        :return: The progress of this ProductionFlowItem.
        :rtype: float
        """
        return self._progress
    
    @progress.setter
    def progress(self, progress: float):
        """Sets the progress of this ProductionFlowItem.


        :param progress: The progress of this ProductionFlowItem.
        :type progress: float
        """
        if progress is None:
            raise ValueError("Invalid value for `progress`, must not be `None`")  # noqa: E501
        
        self._progress = progress
    
    @property
    def paused(self) -> bool:
        """Gets the paused of this ProductionFlowItem.


        :return: The paused of this ProductionFlowItem.
        :rtype: bool
        """
        return self._paused
    
    @paused.setter
    def paused(self, paused: bool):
        """Sets the paused of this ProductionFlowItem.


        :param paused: The paused of this ProductionFlowItem.
        :type paused: bool
        """
        if paused is None:
            raise ValueError("Invalid value for `paused`, must not be `None`")  # noqa: E501
        
        self._paused = paused
    
    @property
    def total(self) -> float:
        """Gets the total of this ProductionFlowItem.


        :return: The total of this ProductionFlowItem.
        :rtype: float
        """
        return self._total
    
    @total.setter
    def total(self, total: float):
        """Sets the total of this ProductionFlowItem.


        :param total: The total of this ProductionFlowItem.
        :type total: float
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501
        
        self._total = total
    
    @property
    def running(self) -> float:
        """Gets the running of this ProductionFlowItem.


        :return: The running of this ProductionFlowItem.
        :rtype: float
        """
        return self._running
    
    @running.setter
    def running(self, running: float):
        """Sets the running of this ProductionFlowItem.


        :param running: The running of this ProductionFlowItem.
        :type running: float
        """
        if running is None:
            raise ValueError("Invalid value for `running`, must not be `None`")  # noqa: E501
        
        self._running = running
    
    @property
    def properties(self) -> List[ProductionFlowItemProperty]:
        """Gets the properties of this ProductionFlowItem.


        :return: The properties of this ProductionFlowItem.
        :rtype: List[ProductionFlowItemProperty]
        """
        return self._properties
    
    @properties.setter
    def properties(self, properties: List[ProductionFlowItemProperty]):
        """Sets the properties of this ProductionFlowItem.


        :param properties: The properties of this ProductionFlowItem.
        :type properties: List[ProductionFlowItemProperty]
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501
        
        self._properties = properties
