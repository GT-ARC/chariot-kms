# coding: utf-8

from __future__ import absolute_import

from swagger_server import util
from swagger_server.models.base_model_ import Model
from swagger_server.models.number_constraint_model_kms import KMSNumberConstraintModel


class NumberConstraintModel(Model, KMSNumberConstraintModel):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    
    def __init__(self, name: str = None, value: float = None):  # noqa: E501
        """NumberConstraintModel - a model defined in Swagger

        :param name: The name of this NumberConstraintModel.  # noqa: E501
        :type name: str
        :param value: The value of this NumberConstraintModel.  # noqa: E501
        :type value: float
        """
        self.swagger_types = {
            'name': str,
            'value': float
        }
        
        self.attribute_map = {
            'name': 'name',
            'value': 'value'
        }
        self._name = name
        self._value = value
    
    @classmethod
    def from_dict(cls, dikt) -> 'NumberConstraintModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NumberConstraintModel of this NumberConstraintModel.  # noqa: E501
        :rtype: NumberConstraintModel
        """
        return util.deserialize_model(dikt, cls)
    
    @property
    def name(self) -> str:
        """Gets the name of this NumberConstraintModel.


        :return: The name of this NumberConstraintModel.
        :rtype: str
        """
        return self._name
    
    @name.setter
    def name(self, name: str):
        """Sets the name of this NumberConstraintModel.


        :param name: The name of this NumberConstraintModel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        
        self._name = name
    
    @property
    def value(self) -> float:
        """Gets the value of this NumberConstraintModel.


        :return: The value of this NumberConstraintModel.
        :rtype: float
        """
        return self._value
    
    @value.setter
    def value(self, value: float):
        """Sets the value of this NumberConstraintModel.


        :param value: The value of this NumberConstraintModel.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501
        
        self._value = value
