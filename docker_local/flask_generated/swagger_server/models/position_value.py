# coding: utf-8

from __future__ import absolute_import

from swagger_server import util
from swagger_server.models.base_model_ import Model
from swagger_server.models.position_value_kms import KMSPositionValue


class PositionValue(Model, KMSPositionValue):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    
    def __init__(self, lat: float = None, lng: float = None):  # noqa: E501
        """PositionValue - a model defined in Swagger

        :param lat: The lat of this PositionValue.  # noqa: E501
        :type lat: float
        :param lng: The lng of this PositionValue.  # noqa: E501
        :type lng: float
        """
        self.swagger_types = {
            'lat': float,
            'lng': float
        }
        
        self.attribute_map = {
            'lat': 'lat',
            'lng': 'lng'
        }
        self._lat = lat
        self._lng = lng
    
    @classmethod
    def from_dict(cls, dikt) -> 'PositionValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PositionValue of this PositionValue.  # noqa: E501
        :rtype: PositionValue
        """
        return util.deserialize_model(dikt, cls)
    
    @property
    def lat(self) -> float:
        """Gets the lat of this PositionValue.

        []  # noqa: E501

        :return: The lat of this PositionValue.
        :rtype: float
        """
        return self._lat
    
    @lat.setter
    def lat(self, lat: float):
        """Sets the lat of this PositionValue.

        []  # noqa: E501

        :param lat: The lat of this PositionValue.
        :type lat: float
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")  # noqa: E501
        
        self._lat = lat
    
    @property
    def lng(self) -> float:
        """Gets the lng of this PositionValue.

        []  # noqa: E501

        :return: The lng of this PositionValue.
        :rtype: float
        """
        return self._lng
    
    @lng.setter
    def lng(self, lng: float):
        """Sets the lng of this PositionValue.

        []  # noqa: E501

        :param lng: The lng of this PositionValue.
        :type lng: float
        """
        if lng is None:
            raise ValueError("Invalid value for `lng`, must not be `None`")  # noqa: E501
        
        self._lng = lng
